---
- hosts: all
  become: yes
  vars_files:
  - external_vars.yml
  tasks:
  
  - name: install packages
    action: > 
      {{ ansible_pkg_mgr }} name="{{ pkgs }}" state=present update_cache=yes 
  
  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  
  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu bionic stable
      state: present
  
  - name: Update apt and install docker-ce
    apt: update_cache=yes name=docker-ce state=latest
  
  - name: Install Docker Module for Python
    pip:
      name: docker
  
  - name: Allow local registry as insecure registry
    copy:
      dest: "/etc/docker/daemon.json"
      content: |
        {
            "insecure-registries" : ["localhost:32000"]
        }
  
  - name: Start docker service
    systemd:
      state: started
      name: docker
  
  - name: Install microk8s snap
    snap:
      name=microk8s
      classic=yes
      state=present
    register: microk8s

  - name: Start microk8s services
    ansible.builtin.shell: export LC_ALL=C.UTF-8 && \
      export LANG=C.UTF-8 && \
      microk8s enable "{{ microk8s_services }}"

  - name: Create user account and add user to groups sudo, microk8s, docker
    ansible.builtin.user:
      name: "{{ my_ansible_user }}"
      state: present
      shell: /bin/bash
      groups: sudo,docker,microk8s
      append: yes
    register: user_created
  
  - name: Allow 'sudo' group to have passwordless sudo
    ansible.builtin.lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%sudo'
      line: '%sudo ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'
    when: user_created.changed

  - name: Set authorized key for user ansible by copying it from current user
    ansible.posix.authorized_key:
      user: "{{ my_ansible_user }}"
      state: present
      key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

  - name: Deactivate root ssh login
    ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^PermitRootLogin'
      line: PermitRootLogin no
    register: sshd
  
  - name: Restart sshd service after disabling root ssh login
    ansible.builtin.service:
      name: sshd
      state: restarted
    when: sshd.changed
